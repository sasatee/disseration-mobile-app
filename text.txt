import { StyleSheet, Text, View } from "react-native";
import React from "react";
import { useGetAllAppointmentQuery } from "../services/appointment";
import {
  useGetAllAppointments,
  useGetAppointmentById,
  useCreateNewAppointment,
  useDeleteAppointmentById,
} from "../hooks/apiAppointment";

const JWTScreen = () => {
  //   const shouldFetchAppointments = true;

  //   const { data, isLoading, isError, status } = useGetAllAppointmentQuery(null, {
  //     skip: !shouldFetchAppointments,
  //   });

  const {
    appointments,
    loading: appointmentsLoading,
    error: appointmentsError,
  } = useGetAllAppointments();
  // Use other hooks similarly...

  if (appointmentsLoading) {
    return (
      <View
        style={{ flex: 1, justifyContent: "center", flexDirection: "column" }}
      >
        <Text>Loading... </Text>
      </View>
    );
  }

  if (appointmentsError) {
    return (
      <View
        style={{ flex: 1, justifyContent: "center", flexDirection: "column" }}
      >
        <Text>Error: {appointmentsError.message}</Text>
      </View>
    );
  }
  return (
    <View
      style={{ flex: 1, justifyContent: "center", flexDirection: "column" }}
    >
      <Text>{JSON.stringify(appointments)}</Text>
    </View>
  );
};

export default JWTScreen;

const styles = StyleSheet.create({});






import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import ReactNativeAsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_URL } from '@env';

const baseURL = BASE_URL.toString();


// Custom function to construct headers
const constructHeaders = async () => {
  const headers = new Headers();

  const token = await ReactNativeAsyncStorage.getItem('jwtToken');
  const googleAccessToken = await ReactNativeAsyncStorage.getItem('googleAccessToken');

  if (token && googleAccessToken) {
    headers.set('Authorization', `Bearer ${token},${googleAccessToken}`);
  } else if (token) {
    headers.set('Authorization', `Bearer ${token}`);
  } else if (googleAccessToken) {
    headers.set('Authorization', `Bearer ${googleAccessToken}`);
  } else {
    console.error('No token available');
  }

  return headers;
};

// Base query with custom headers
// const baseQuery = fetchBaseQuery({
//   baseUrl: baseURL,
//   prepareHeaders: async (headers, { getState }) => {
//     const customHeaders = await constructHeaders();
//     console.log(customHeaders)
//     customHeaders.forEach((value, key) => {
//       headers.set(key, value);
//     });
//     return headers;
//   },
// });

const baseQuery = fetchBaseQuery({
  baseUrl: baseURL,
  prepareHeaders: async (headers, { getState }) => {
    // Remove any existing Authorization header to ensure it's fresh
    headers.set('Authorization', undefined);

    // Construct headers with the latest token
    const customHeaders = await constructHeaders();
    console.log(customHeaders);
    customHeaders.forEach((value, key) => {
      // Here, only the latest token value will be set
      headers.set(key, value);
    });
    
    return headers;
  },
});


// API service
export const appointments = createApi({
  reducerPath: 'appointments',
  baseQuery: baseQuery,
  endpoints: (builder) => ({
    getAppointments: builder.query({
      query: () => 'api/v1/appointment',
    }),
    getAppointmentById: builder.query({
      query: (id) => `api/v1/appointment/${id}`,
    }),
    createNewAppointment: builder.mutation({
      query: (newAppointment) => ({
        url: 'api/v1/appointment',
        method: 'POST',
        body: newAppointment,
      }),
    }),
    deleteAppointmentById: builder.mutation({
      query: (id) => ({
        url: `api/v1/appointment/${id}`,
        method: 'DELETE',
      }),
    }),
  }),
});

// Export hooks for usage in functional components
export const {
  useGetAppointmentsQuery,
  useGetAppointmentByIdQuery,
  useCreateNewAppointmentMutation,
  useDeleteAppointmentByIdMutation,
} = appointments;









import React from "react";
import {
  CallContent,
  StreamCall,
  StreamVideo,
  StreamVideoClient,
  User,
} from "@stream-io/video-react-native-sdk";
import { STREAM_PUBLIC } from "@env";
import { Text } from "react-native";

const apiKey = STREAM_PUBLIC;
const userId = "6640b042da333b00082e9a37";
const token =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjY0MGIwNDJkYTMzM2IwMDA4MmU5YTM3In0.6640b042da333b00082e9a37";
const callId = "default_f496fa0c-caa6-4722-8ce4-64db35659a95";
const user = { id: userId };

const client = new StreamVideoClient({ apiKey, user, token });
const call = client.call("default", callId);
call.join({ create: true });

const CallScreen = () => {
  return (
    <StreamVideo client={client}>
      <StreamCall call={call}><CallContent/></StreamCall>
    </StreamVideo>
  );
};

export default CallScreen;
