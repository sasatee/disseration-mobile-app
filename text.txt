curl \
  -H 'Content-Type: application/json' \
  -d '{"contents":[{"parts":[{"text":"Explain how AI works"}]}]}' \
  -X POST 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyAqRdoLv_z4R3y4lMvYxrqZfGgaaow6WrE'




  import "react-native-gesture-handler";
import { StatusBar } from "expo-status-bar";
import {
  Button,
  Pressable,
  StyleSheet,
  Switch,
  Text,
  useWindowDimensions,
  View,
  TextInput,
  TouchableOpacity,
} from "react-native";
import {
  BottomSheetModal,
  BottomSheetModalProvider,
} from "@gorhom/bottom-sheet";
import { useRef, useState } from "react";
import { AntDesign } from "@expo/vector-icons";
import { Entypo } from "@expo/vector-icons";
import { FlatList } from "react-native-gesture-handler";
import axios from "axios";
// import { isSpeakingAsync, speak, stop } from "expo-speech";
import ChatBubble from "./ChatBubble";

const messages = [
  { id: "1", text: "Hello!", sender: "user" },
  { id: "2", text: "Hi there!", sender: "other" },
  // Add more messages here
];

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);

  const bottomSheetModalRef = useRef(null);

  const snapPoints = ["75%"];

  function handlePresentModal() {
    bottomSheetModalRef.current?.present();
    setTimeout(() => {
      setIsOpen(true);
    }, 100);
  }
  //Chatbot

  const [chat, SetChat] = useState([]);
  const [userInput, setUserInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isSpeaking, setIsSpeaking] = useState(false);

  const Api_key = "AIzaSyAqRdoLv_z4R3y4lMvYxrqZfGgaaow6WrE";

  const handleUserInput = async () => {
    let updateChat = [
      ...chat,
      {
        role: "user",
        parts: [{ text: userInput }],
      },
    ];

    setLoading(true);

    try {
      const reponse = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${Api_key}`,
        {
          contents: updateChat,
        }
      );
      console.log("Gemini Pro api response", reponse.data);

      const modelReponse =
        reponse.data?.candidates?.[0]?.content?.parts?.[0]?.text || "";

      if (modelReponse) {
        // Add model response
        const updatedChatWithModel = [
          ...updateChat,
          {
            role: "model",
            parts: [{ text: modelReponse }],
          },
        ];
        SetChat(updatedChatWithModel);
      }
    } catch (error) {
      console.error("Eror calling Gemini Pro Api", error);
      setError("An error occurred. Please try Again  later! ");
    }
    setLoading(false);
  };

  const handleSpeech = async (text) => {
    if (isSpeaking) {
      //if already speaking,stop the speech

      stop();
      setIsSpeaking(false);
    } else {
      //if not speaking , start the speech
      if (!(await isSpeakingAsync())) {
        speak(text);
        setIsSpeaking(true);
      }
    }

    const renderChatItem = ({ item }) => (
      <ChatBubble
        role={item.role}
        text={item.part[0].text}
//onSpeech={() => handleSpeech(item.parts[0].text)}
      />
    );

    //
    return (
      <BottomSheetModalProvider>
        <View style={[styles.container, { backgroundColor: "white" }]}>
          <Button title="Present Modal" onPress={handlePresentModal} />

          <BottomSheetModal
            ref={bottomSheetModalRef}
            index={0}
            snapPoints={snapPoints}
            backgroundStyle={{ borderRadius: 50 }}
            onDismiss={() => setIsOpen(false)}
          >
            <View className="flex-1 bg-white p-8">
              <Text className="text-center text-lg text-ellipsis decoration mt-5">
                Chat Bot
              </Text>
              <FlatList
                data={messages}
                keyExtractor={renderChatItem}
                //     renderItem={({ item,index }) => (
                //       <View
                //         className={`my-3 ${
                //           item.sender === "user" ? "items-end" : "items-start"
                //         }`}
                //       >
                //         <View
                //           className={`p-3 ${
                //             item.sender === "user" ? " bg-blue-500" : "bg-black"
                //           } rounded-lg`}
                //         >
                //           <Text className="text-white">{item.text}</Text>
                //         </View>
                //       </View>
                //     )}
                renderItem={(item, index) => index.toString()}
              />
            </View>
            <View className="flex-row  items-center mt-9">
              <TextInput
                placeholder="Type your message..."
                placeholderTextColor="#aaa"
                value={userInput}
                onChangeText={setUserInput}
                className="flex-1 h-20 mr-5 p-6 border bg-[#fff]"
              />
              <TouchableOpacity
                onPress={handleUserInput}
                className="p-9 bg-slate-600 border border-fuchsia-600"
              >
                <Text className="text-center text-slate-950">SEND</Text>
              </TouchableOpacity>
            </View>
          </BottomSheetModal>
        </View>
      </BottomSheetModalProvider>
    );
  };
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "gray",
    alignItems: "center",
    justifyContent: "center",
  },
  contentContainer: {
    flex: 1,
    alignItems: "center",
    paddingHorizontal: 15,
  },
  row: {
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginVertical: 10,
  },
  title: {
    fontWeight: "900",
    letterSpacing: 0.5,
    fontSize: 16,
  },
  subtitle: {
    color: "#101318",
    fontSize: 14,
    fontWeight: "bold",
  },
  description: {
    color: "#56636F",
    fontSize: 13,
    fontWeight: "normal",
    width: "100%",
  },
});
